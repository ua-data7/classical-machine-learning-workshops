---
title: "Tidymodels: Build a Model"
author: Greg Chism
format:
  html:
    theme: cosmo
    code-copy: true
    toc: true
editor: visual
---

::: columns
::: {.column width="50%"}
![[Image Credit](https://www.r-bloggers.com/2018/12/tidymodels/)](https://avatars0.githubusercontent.com/u/29100987?s=400&v=4){alt="Image Credit: https://www.r-bloggers.com/2018/12/tidymodels/" fig-align="left" width="200"}
:::

::: {.column width="50%"}
![](https://gchism94.github.io/Data7_EDA_In_R_Workshops/cover.png){fig-align="left" width="392"}
:::
:::

## Description

Python has taken most of the hype as the most widely used programming language for machine learning. This has left R users with a choice: 1. learn Python or 2. don't do machine learning very well. Enter [`tidymodels`](https://www.tidymodels.org/), Posit's solution to machine learning in R, using a framework similar to the [`tidyverse`](https://www.tidyverse.org/).

In this session of the Classical Machine Learning workshop series, we will overview how to build a model using the `tidymodels` framework in R. This is the first necessary step towards the most sophisticated models that we will deploy later in this series.

This workshop borrows heavily from open source materials hosted on [tidymodels.org](https://www.tidymodels.org/) found [here](https://www.tidymodels.org/start/models/). The author replaced the original `urchins` data with [Meredith, Ladd, and Werner 2021](https://arizona.figshare.com/articles/dataset/Data_for_Ecosystem_fluxes_during_drought_and_recovery_in_an_experimental_forest_/14632593/1) which is described below.

### Objectives:

1.  Load and examine data
2.  Build and fit a model
3.  Use a model to predict
4.  Model with different engines

------------------------------------------------------------------------

### **Introduction**

How do you create a statistical model using `tidymodels`? In this article, we will walk you through the steps. We start with data for modeling, learn how to specify and train models with different engines using the [parsnip package](https://parsnip.tidymodels.org/), and understand why these functions are designed this way.

To use code in this article, you will need to install the following packages: `broom.mixed`, `dotwhisker`, `readr`, `rstanarm`, `RCurl` and `tidymodels`.

```{r}
library(tidymodels)  # for the parsnip package, along with the rest of tidymodels

# Helper packages
library(readr)       # for importing data
library(broom.mixed) # for converting bayesian models to tidy tibbles
library(dotwhisker)  # for visualizing regression results
library(RCurl)       # for reading in text files from a URL
theme_set(theme_minimal(base_size = 14)) 
theme_update(legend.position = "right")
```

------------------------------------------------------------------------

### Canopy rain forest drought tolerance data

Let's use the data from [Meredith, Ladd, and Werner 2021](https://arizona.figshare.com/articles/dataset/Data_for_Ecosystem_fluxes_during_drought_and_recovery_in_an_experimental_forest_/14632593/1) which is from a study that investigates the effects of climate change on canopy and understory (those that grow below the canopy and are share tolerant) trees. The data examine water flux in trees across four groups based on drought susceptibility `Group`:

-   `drought-sens-canopy`: drought sensitive canopy trees

-   `drought-tol-canopy`: drought tolerant canopy trees

-   `drought-sens-under`: drought sensitive understory trees.

-   `drought-tol-under`: drought tolerant understory trees.

```{r}
# Read in csv from the web
data <- getURL("https://raw.githubusercontent.com/Gchism94/Data7_EDA_In_R_Workshops/main/Data7_EDA_In_R_Book/data/Data_Fig2_Repo.csv")
data <- read.csv(text = data)
```

#### Examine the data

```{r}
data %>%
  head()
```

For each of the drought sensitivity groups (`Group`), we know their:

-   `Sap_Flow`: Sap flow rate $V_s$ in cm hr$^-1$.

-   `pLWP`: Pre-dawn water potential (MegaPascals MPa) representing the potential (energy) of water flow throughout the tree.

-   `mLWP`: Midday water potential (MegaPascals MPa) representing the potential (energy) of water flow throughout the tree.

-   `TWaterFlux`: Normalized total water flux (sap flow `Sap_Flow`, pre-dawn `pLWP` and midday `mLWP` water potential) in each treatment group. Values are normalized based on pre-drought levels.

Plot the data before modeling:

```{r, warning=FALSE}
ggplot(data,
       aes(x = pLWP, 
           y = mLWP, 
           group = Group, 
           col = Group)) + 
  geom_point() + 
  geom_smooth(method = lm, se = FALSE) +
  scale_color_viridis_d(option = "plasma", end = 0.7)
```

------------------------------------------------------------------------

### Build and Fit a Model

A standard three-way analysis of variance ([ANOVA](https://www.statisticshowto.com/three-way-anova/)) model makes sense for this dataset because we have both a continuous and a categorical predictor variables. Since the slopes appear to be different for at least two of the drought treatments, let's build a model that allows for two-way interactions. Specifying an R formula with our variables in this way:

```{r, eval = FALSE}
mLWP ~ pLWP * Group
```

allows our regression model depending on pre-dawn water potential `pLWP` to have separate slopes and intercepts for each drought sensitivity `Group`.

For this kind of model, [ordinary least squares](https://en.wikipedia.org/wiki/Ordinary_least_squares) is a good initial approach. With tidymodels, we start by specifying the *functional form* of the model that we want using the [parsnip package](https://parsnip.tidymodels.org/). Since there is a numeric outcome and the model should be linear with slopes and intercepts, the model type is ["linear regression"](https://parsnip.tidymodels.org/reference/linear_reg.html). We can declare this with:

```{r}
linear_reg()
```

That is pretty underwhelming since, on its own, it doesn't really do much. However, now that the type of model has been specified, we can think about a method for *fitting* or training the model, the model **engine**. The engine value is often a mash-up of the software that can be used to fit or train the model as well as the estimation method. The default for `linear_reg()` is `"lm"` for ordinary least squares, as you can see above. We could set a non-default option instead ([keras](https://cran.r-project.org/web/packages/keras/vignettes/index.html)):

```{r}
linear_reg() %>% 
  set_engine("keras")
```

The [documentation page for `linear_reg()`](https://parsnip.tidymodels.org/reference/linear_reg.html) lists all the possible engines. We'll save our model object using the default engine as `lm_mod`.

```{r}
lm_mod <- linear_reg()
```

From here, the model can be estimated or trained using the [`fit()`](https://parsnip.tidymodels.org/reference/fit.html) function:

```{r}
lm_fit <- 
  lm_mod %>% 
  fit(mLWP ~ pLWP * Group, data = data)
lm_fit
```

Perhaps our analysis requires a description of the model parameter estimates and their statistical properties. Although the `summary()` function for `lm` objects can provide that, it gives the results back in an unwieldy format. Many models have a `tidy()` method that provides the summary results in a more predictable and useful format (e.g. a data frame with standard column names):

```{r}
tidy(lm_fit)
```

This kind of output can be used to generate a dot-and-whisker plot of our regression results using the `dotwhisker` package:

```{r}
tidy(lm_fit) %>% 
  dwplot(dot_args = list(size = 2, color = "black"),
         whisker_args = list(color = "black"),
         vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2))
```

------------------------------------------------------------------------

### Use a Model to Predict

This fitted object `lm_fit` has the `lm` model output built-in, which you can access with `lm_fit$fit`, but there are some benefits to using the fitted parsnip model object when it comes to predicting.

Suppose that, for a publication, it would be particularly interesting to make a plot of the mean midday water potential (`mLWP`) for trees that have a pre-dawn water potential (`pLWP`) of -1.75 MPa. To create such a graph, we start with some new example data that we will make predictions for, to show in our graph:

```{r}
new_points <- expand.grid(pLWP = -1.75,
                          Group = c("Drought-sens-canopy",
                                    "Drought-sens-under",
                                    "Drought-tol-canopy",
                                    "Drought-tol-under"))
new_points
```

To get our predicted results, we can use the `predict()` function to find the mean values at 200 cm hr$^-1$.

It is also important to communicate the variability, so we also need to find the predicted confidence intervals. If we had used `lm()` to fit the model directly, a few minutes of reading the [documentation page](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/predict.lm.html) for `predict.lm()` would explain how to do this. However, if we decide to use a different model to estimate urchin size (*spoiler:* we will!), it is likely that a completely different syntax would be required.

Instead, with `tidymodels`, the types of predicted values are standardized so that we can use the same syntax to get these values.

First, let's generate the mean body width values:

```{r}
mean_pred <- predict(lm_fit, new_data = new_points)
mean_pred
```

When making predictions, the `tidymodels` convention is to always produce a tibble of results with standardized column names. This makes it easy to combine the original data and the predictions in a usable format:

```{r}
conf_int_pred <- predict(lm_fit,
                         new_data = new_points,
                         type = "conf_int")
conf_int_pred
```

```{r}
# Now combine:
plot_data <- 
  new_points %>% 
  bind_cols(mean_pred) %>% 
  bind_cols(conf_int_pred)

# and plot:
ggplot(plot_data, aes(x = Group)) + 
  geom_point(aes(y = .pred)) + 
  geom_errorbar(aes(ymin = .pred_lower, 
                    ymax = .pred_upper),
                width = .2) + 
  labs(y = "mLWP")
```

------------------------------------------------------------------------

### Model with a Different Engine

Every one on your team is happy with that plot *except* that one person who just read their first book on [Bayesian analysis](https://bayesian.org/what-is-bayesian-analysis/). They are interested in knowing if the results would be different if the model were estimated using a Bayesian approach. In such an analysis, a [*prior distribution*](https://towardsdatascience.com/introduction-to-bayesian-linear-regression-e66e60791ea7) needs to be declared for each model parameter that represents the possible values of the parameters (before being exposed to the observed data). After some discussion, the group agrees that the priors should be bell-shaped but, since no one has any idea what the range of values should be, to take a conservative approach and make the priors *wide* using a Cauchy distribution (which is the same as a t-distribution with a single degree of freedom).

The [documentation](https://mc-stan.org/rstanarm/articles/priors.html) on the `rstanarm` package shows us that the `stan_glm()` function can be used to estimate this model, and that the function arguments that need to be specified are called `prior` and `prior_intercept`. It turns out that `linear_reg()` has a [`stan` engine](https://parsnip.tidymodels.org/reference/linear_reg.html#details). Since these prior distribution arguments are specific to the Stan software, they are passed as arguments to [`parsnip::set_engine()`](https://parsnip.tidymodels.org/reference/set_engine.html). After that, the same exact `fit()` call is used:

```{r}
# set the prior distribution
prior_dist <- rstanarm::student_t(df = 1)

set.seed(123)

# make the parsnip model
bayes_mod <- 
  linear_reg() %>%
  set_engine("stan",
             prior_intercept = prior_dist,
             prior = prior_dist)

# train the model
bayes_fit <- 
  bayes_mod %>% 
  fit(mLWP ~ pLWP * Group, data = data)

print(bayes_fit, digits = 5)
```

This kind of Bayesian analysis (like many models) involves randomly generated numbers in its fitting procedure. We can use `set.seed()` to ensure that the same (pseudo-)random numbers are generated each time we run this code. The number `123` isn't special or related to our data; it is just a "seed" used to choose random numbers.

To update the parameter table, the `tidy()` method is once again used:

```{r}
tidy(bayes_fit, conf.int = TRUE)
```

A goal of the `tidymodels` packages is that the **interfaces to common tasks are standardized** (as seen in the `tidy()` results above). The same is true for getting predictions; we can use the same code even though the underlying packages use very different syntax:

```{r}
bayes_plot_data <- 
  new_points %>% 
  bind_cols(predict(bayes_fit, new_data = new_points)) %>% 
  bind_cols(predict(bayes_fit, new_data = new_points, type = "conf_int"))

ggplot(bayes_plot_data, aes(x = Group)) + 
  geom_point(aes(y = .pred)) + 
  geom_errorbar(aes(ymin = .pred_lower, ymax = .pred_upper), width = .2) + 
  labs(y = "mLWP") + 
  ggtitle("Bayesian model with t(1) prior distribution")

```

This isn't very different from the non-Bayesian results (except in interpretation).

> Note: The [`parsnip`](https://parsnip.tidymodels.org/) package can work with many model types, engines, and arguments. Check out [tidymodels.org/find/parsnip/](https://www.tidymodels.org/find/parsnip/) to see what is available.

------------------------------------------------------------------------

### Why does is work that way?

The extra step of defining the model using a function like `linear_reg()` might seem superfluous since a call to `lm()` is much more succinct. However, the problem with standard modeling functions is that they don't separate what you want to do from the execution. For example, the process of executing a formula has to happen repeatedly across model calls even when the formula does not change; we can't recycle those computations.

Also, using the `tidymodels` framework, we can do some interesting things by incrementally creating a model (instead of using single function call). [Model tuning](https://www.tidymodels.org/start/tuning/) with `tidymodels` uses the specification of the model to declare what parts of the model should be tuned. That would be very difficult to do if `linear_reg()` immediately fit the model.

If you are familiar with the tidyverse, you may have noticed that our modeling code uses the magrittr pipe (`%>%`). With dplyr and other `tidyverse` packages, the pipe works well because all of the functions take the *data* as the first argument. For example:

```{r}
data %>%
  group_by(Group) %>%
  drop_na() %>% # note that NAs need to be removed
  summarize(med_pLWP = median(pLWP))
```

whereas the modeling code uses the pipe to pass around the *model object*:

```{r, eval=FALSE}
bayes_mod %>% fit(mLWP ~ pLWP * Group, data = data)
```

This may seem jarring if you have used dplyr a lot, but it is extremely similar to how ggplot2 operates:

```{r, eval=FALSE}
ggplot(data,
       aes(pLWP, mLWP)) +                # returns a ggplot object
  geom_jitter() +                        # same
  geom_smooth(method = lm, se = FALSE) + # same
  labs(x = "pLWP", y = "mLWP")           # etc.
```

------------------------------------------------------------------------

### Session Information

```{r, echo=FALSE}
sessioninfo::session_info()
```
